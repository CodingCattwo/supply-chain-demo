{"remainingRequest":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/thread-loader/dist/cjs.js!/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/babel-loader/lib/index.js!/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/src/views/create/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/src/views/create/index.vue","mtime":1623821705459},{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lannywu/A2021/06/0616/supply-chain-demo/frontend/supplychain/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}